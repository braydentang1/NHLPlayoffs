evaluate = function(bootstrap){
data_tmp = data[boostrap, ]
model = ranger(Target ~., data = data_tmp, probability = TRUE, mtry = 5, num.trees = 650, num.threads = 4)
prediction = tibble(prob = predict(model, data = data_tmp, type = "response")$predictions[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
boostrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
}
library(tidyverse)
library(ranger)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap){
data_tmp = data[boostrap, ]
model = ranger(Target ~., data = data_tmp, probability = TRUE, mtry = 5, num.trees = 650, num.threads = 4)
prediction = tibble(prob = predict(model, data = data_tmp, type = "response")$predictions[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
bootstrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
}
library(tidyverse)
library(ranger)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap){
data_tmp = data[boostrap, ]
model = ranger(Target ~., data = data_tmp, probability = TRUE, mtry = 5, num.trees = 650, num.threads = 4)
prediction = tibble(prob = predict(model, data = data_tmp, type = "response")$predictions[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
bootstrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
}
results = bootstrap.optimism(n = 10, original.y = y)
library(tidyverse)
library(ranger)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap){
data_tmp = data[bootstrap, ]
model = ranger(Target ~., data = data_tmp, probability = TRUE, mtry = 5, num.trees = 650, num.threads = 4)
prediction = tibble(prob = predict(model, data = data_tmp, type = "response")$predictions[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
bootstrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
}
results = bootstrap.optimism(n = 10, original.y = y)
View(results)
library(e1071)
model = svm(x = data[, !names(data) %in% c("Target")], y = data$Target)
View(model)
prob = predict(model, newdata = data_tmp, probability = TRUE)
data_tmp = data[bootstrap, ]
model = svm(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, scale = TRUE)
library(tidyverse)
library(e1071)
library(yardstick)
library(caret)
library(tidyverse)
library(e1071)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
n = 10, original.y = y
n = 10
original.y = y
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
bootstrap = resamples[[1]]
data_tmp = data[bootstrap, ]
model = svm(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, scale = TRUE)
prediction = tibble(prob = predict(model, newdata = data_tmp, probability = TRUE), target = data_tmp$Target)
predict(model, newdata = data_tmp, probability = TRUE)
predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE)
data_tmp = data[bootstrap, ]
model = svm(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probabilities = TRUE, scale = TRUE)
prediction = tibble(prob = predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), target = data_tmp$Target)
install.packages("liquidSVM")
library(tidyverse)
library(liquidSVM)
library(yardstick)
library(caret)
model = mcSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, predict.prob = TRUE, scale = TRUE)
model = mcSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, predict.prob = TRUE)
model = mcSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = as.character(data_tmp$Target), predict.prob = TRUE)
install.packages("parallelSVM")
library(tidyverse)
library(parallelSVM)
library(yardstick)
library(caret)
data_tmp = data[bootstrap, ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prob = predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")])
prob
prob = predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE)
prob
table(prob)
attr(prob)
attr(prob, probabilities)
attr(prob, "probabilities")
prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")
View(prob)
View(prob)
data_tmp = data[bootstrap, ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
model.orig = parallelSVM(x = data_tmp[, !names(data)] %in% c("Target"), y = data$Target, probability = TRUE)
prediction.orig = tibble(prob = attr(predict(model.orig, newdata = data[, !names(data) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data$Target)
apparent.error = roc_auc(data = prediction.orig, truth = target, prob)$.estimate
source('~/Frank Harell Bootstrap Test.R', echo=TRUE)
library(tidyverse)
library(parallelSVM)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap){
data_tmp = data[bootstrap, ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
bootstrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
}
model.orig = parallelSVM(x = data[, !names(data) %in% c("Target")], y = data$Target, probability = TRUE)
prediction.orig = tibble(prob = attr(predict(model.orig, newdata = data[, !names(data) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data$Target)
apparent.error = roc_auc(data = prediction.orig, truth = target, prob)$.estimate
optimism = mean(unlist(bootstrap.optimism(n = 10, original.y = y)))
n = 2
original.y = y
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
View(resamples)
View(resamples)
View(resamples)
results = lapply(resamples, FUN = evaluate)
View(resamples)
resamples[[1]]
bootstrap = resamples[1]
View(bootstrap)
bootstrap = resamples[[1]
]
data_tmp = data[bootstrap, ]
results = sapply(resamples, FUN = evaluate)
library(tidyverse)
library(parallelSVM)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
n = 2
original.y = y
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
evaluate = function(bootstrap){
data_tmp = data[bootstrap, ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_auc(data = prediction, truth = target, prob)$.estimate
}
results = lapply(resamples, FUN = evaluate)
resamples[1]
bootstrap = resamples[1]
data_tmp = data[bootstrap, ]
data_tmp = data[unlist(bootstrap), ]
results = lapply(resamples, FUN = evaluate)
source('~/Frank Harell Bootstrap Test.R', echo=TRUE)
n = 10
original.y = y
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
results = lapply(resamples, FUN = evaluate)
View(resamples)
set.seed(40689)
resamples = caret::createResample(y = original.y, times = 2)
results = lapply(resamples, FUN = evaluate)
bootstrap[1]
resamples[1]
resamples[[1]]
data_tmp = resamples[[1]]
boostrap = resampls
boostrap = resamples
roc_tmp = vector("numeric", length(bootstrap))
roc_tmp = vector("numeric", length(bootstraps))
roc_tmp = vector("numeric", length(boostraps))
roc_tmp = vector("numeric", length(boostrap))
library(tidyverse)
library(parallelSVM)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap){
roc_tmp = vector("numeric", length(bootstrap))
for (i in 1:length(bootstrap)){
data_tmp = data[boostrap[[i]], ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_tmp[i] = roc_auc(data = prediction, truth = target, prob)$.estimate
}
mean(roc_tmp)
}
bootstrap.optimism = function(n, original.y){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = 2)
evaluate(resamples)
}
model.orig = parallelSVM(x = data[, !names(data) %in% c("Target")], y = data$Target, probability = TRUE)
prediction.orig = tibble(prob = attr(predict(model.orig, newdata = data[, !names(data) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data$Target)
apparent.error = roc_auc(data = prediction.orig, truth = target, prob)$.estimate
optimism = mean(unlist(bootstrap.optimism(n = 10, original.y = y)))
source('~/Frank Harell Bootstrap Test.R', echo=TRUE)
n = 2
original.y = y
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
evaluate(resamples)
bootstrap = resamples
roc_tmp = vector("numeric", length(bootstrap))
i = 1
data_tmp = data[bootstrap[[i]], ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_tmp[i] = roc_auc(data = prediction, truth = target, prob)$.estimate
mean(roc_tmp)
roc_tmp[i] = roc_auc(data = prediction, truth = target, prob)$.estimate
for (i in 1:length(bootstrap)){
data_tmp = data[bootstrap[[i]], ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_tmp[i] = roc_auc(data = prediction, truth = target, prob)$.estimate
}
evaluate(resamples)
source('~/Frank Harell Bootstrap Test.R', echo=TRUE)
library(tidyverse)
library(parallelSVM)
library(yardstick)
library(caret)
#generate 1000 samples of random 0,1
set.seed(40689)
y = as.factor(sample(c("a","b"), replace = TRUE, size = 10000))
data = replicate(100, runif(n = 10000, min = -1, max = 1)) %>% as_tibble(.) %>% bind_cols(Target = y,.)
evaluate = function(bootstrap, data){
roc_tmp = vector("numeric", length(bootstrap))
for (i in 1:length(bootstrap)){
data_tmp = data[bootstrap[[i]], ]
model = parallelSVM(x = data_tmp[, !names(data_tmp) %in% c("Target")], y = data_tmp$Target, probability = TRUE)
prediction = tibble(prob = attr(predict(model, newdata = data_tmp[, !names(data_tmp) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data_tmp$Target)
roc_tmp[i] = roc_auc(data = prediction, truth = target, prob)$.estimate
}
mean(roc_tmp)
}
bootstrap.optimism = function(n, original.y, data){
set.seed(40689)
resamples = caret::createResample(y = original.y, times = n)
evaluate(bootstrap = resamples, data = data)
}
model.orig = parallelSVM(x = data[, !names(data) %in% c("Target")], y = data$Target, probability = TRUE)
prediction.orig = tibble(prob = attr(predict(model.orig, newdata = data[, !names(data) %in% c("Target")], probability = TRUE), "probabilities")[,1], target = data$Target)
apparent.error = roc_auc(data = prediction.orig, truth = target, prob)$.estimate
optimism = bootstrap.optimism(n = 2, original.y = y, data = data)
library(tidyverse)
library(rvest)
template = read_csv("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Scraping Scripts and Template/Template.csv")
accronyms_pg = read_html("https://en.wikipedia.org/wiki/Template:NHL_team_abbreviations")
accronyms = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 1,3)
fullnames = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 7, 1000000L)
lookup_Accronyms = cbind(FullName = fullnames, Accronym = accronyms) %>%
as_tibble(.) %>%
bind_rows(., c(FullName = "Mighty Ducks of Anaheim", Accronym = "MDA"))
rm(accronyms_pg, accronyms, fullnames)
getData_pon = function(year){
year2 = year - 1
mainpage = read_html(paste("http://www.puckon.net/fenwick.php?s=",year2,"-09-01&e=",year,"-06-30&f=0&ld=1&l=82&p=0", sep=""))
last20page_main = read_html(paste("https://www.puckon.net/?s=",year2,"-08-01&e=",year,"-06-30&f=0&ld=-1&l=20&p=0", sep = ""))
last20page_Goals = read_html(paste("https://www.puckon.net/goals.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_misses = read_html(paste("https://www.puckon.net/misses.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_blocks = read_html(paste("https://www.puckon.net/blocks.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_hits = read_html(paste("https://www.puckon.net/hits.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
teams = mainpage %>%
html_nodes("td:nth-child(1)") %>%
html_text(.) %>%
gsub("\\.", "",.) %>%
as_tibble(.) %>%
set_names(., "Accronym") %>%
mutate(Accronym = ifelse(Accronym == "LA", "LAK",Accronym)) %>%
mutate(Accronym = ifelse(Accronym == "NJ", "NJD", Accronym)) %>%
mutate(Accronym = ifelse(Accronym == "SJ", "SJS", Accronym)) %>%
mutate(Accronym = ifelse(Accronym =="TB", "TBL", Accronym))
Fenwick = mainpage %>%
html_nodes("td:nth-child(6)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Fenwick = .)
Fenwick_Last20 = last20page_main %>%
html_nodes("td:nth-child(10)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Fenwick_Last20 = .)
Corsi_Last20 = last20page_main %>%
html_nodes("td:nth-child(6)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Corsi_Last20 = .)
SOG_Last20 = last20page_main %>%
html_nodes("td:nth-child(14)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(SOG_Last20 = .)
rm(last20page_main)
GoalsPercentage_Last20 = last20page_Goals %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(GoalsPercentage_Last20 =.)
rm(last20page_Goals)
MissesPercentage_Last20 = last20page_misses %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(MissesPercentage_Last20 = .)
rm(last20page_misses)
BlocksPercentage_Last20 = last20page_blocks %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(BlocksPercentage_Last20 = .)
rm(last20page_blocks)
HitsPercentage_Last20 = last20page_hits %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(HitsPercentage_Last20 = .)
rm(last20page_hits)
data = left_join(teams,lookup_Accronyms, by = "Accronym") %>%
bind_cols(.,tibble(Year = rep(year, nrow(teams))),teams,Fenwick, Fenwick_Last20, Corsi_Last20, SOG_Last20, GoalsPercentage_Last20, MissesPercentage_Last20, BlocksPercentage_Last20, HitsPercentage_Last20) %>%
mutate(FullName = ifelse(FullName == "St. Louis Blues", "St Louis Blues", FullName)) %>%
mutate(FullName = ifelse(FullName == "Anaheim Ducks" & Year <= 2006, "Mighty Ducks of Anaheim", FullName))
}
processData = function(team.1, team.2, highest.seed, data, year){
data = data %>% filter(., Year == year)
team_Fenwick = c(data$Fenwick[which(data$Team == team.1)], data$Fenwick[which(data$Team == team.2)])
team_FenwickLast20 = c(data$Fenwick_Last20[which(data$Team == team.1)], data$Fenwick_Last20[which(data$Team == team.2)])
team_CorsiLast20 = c(data$Corsi_Last20[which(data$Team == team.1)], data$Corsi_Last20[which(data$Team == team.2)])
team_SOGLast20 = c(data$SOG_Last20[which(data$Team == team.1)], data$SOG_Last20[which(data$Team == team.2)])
team_GoalsPercentageLast20 = c(data$GoalsPercentage_Last20[which(data$Team == team.1)], data$GoalsPercentage_Last20[which(data$Team == team.2)])
team_MissesPercentageLast20 = c(data$MissesPercentage_Last20[which(data$Team == team.1)], data$MissesPercentage_Last20[which(data$Team == team.2)])
team_BlocksPercentageLast20 = c(data$BlocksPercentage_Last20[which(data$Team == team.1)], data$BlocksPercentage_Last20[which(data$Team == team.2)])
team_HitsPercentageLast20 = c(data$HitsPercentage_Last20[which(data$Team == team.1)], data$HitsPercentage_Last20[which(data$Team == team.2)])
list(Fenwick = as.numeric(team_Fenwick[which(c(team.1,team.2) == highest.seed)] - team_Fenwick[which(c(team.1, team.2) != highest.seed)]),
Fenwick_Last20 = as.numeric(team_FenwickLast20[which(c(team.1,team.2) == highest.seed)] - team_FenwickLast20[which(c(team.1, team.2) != highest.seed)]),
Corsi_Last20 = as.numeric(team_CorsiLast20[which(c(team.1,team.2) == highest.seed)] - team_CorsiLast20[which(c(team.1, team.2) != highest.seed)]),
SOG_Last20 = as.numeric(team_SOGLast20[which(c(team.1,team.2) == highest.seed)] - team_SOGLast20[which(c(team.1, team.2) != highest.seed)]),
GoalsPercentageLast20 = as.numeric(team_GoalsPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_GoalsPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
MissesPercentageLast20 = as.numeric(team_MissesPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_MissesPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
BlocksPercentageLast20 = as.numeric(team_BlocksPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_BlocksPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
HitsPercentageLast20 = as.numeric(team_HitsPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_HitsPercentageLast20[which(c(team.1, team.2) != highest.seed)]))
}
allYears = bind_rows(lapply(seq(2006, 2018,1), FUN = getData_pon)) %>% rename(Team = FullName)
library(tidyverse)
library(rvest)
template = read_csv("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Scraping Scripts and Template/Template.csv")
accronyms_pg = read_html("https://en.wikipedia.org/wiki/Template:NHL_team_abbreviations")
accronyms = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 1,3)
fullnames = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 7, 1000000L)
lookup_Accronyms = cbind(FullName = fullnames, Accronym = accronyms) %>%
as_tibble(.) %>%
bind_rows(., c(FullName = "Mighty Ducks of Anaheim", Accronym = "MDA"))
rm(accronyms_pg, accronyms, fullnames)
getData_pon = function(year){
year2 = year - 1
mainpage = read_html(paste("http://www.puckon.net/fenwick.php?s=",year2,"-09-01&e=",year,"-06-30&f=0&ld=1&l=82&p=0", sep=""))
last20page_main = read_html(paste("https://www.puckon.net/?s=",year2,"-08-01&e=",year,"-06-30&f=0&ld=-1&l=20&p=0", sep = ""))
last20page_Goals = read_html(paste("https://www.puckon.net/goals.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_misses = read_html(paste("https://www.puckon.net/misses.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_blocks = read_html(paste("https://www.puckon.net/blocks.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
last20page_hits = read_html(paste("https://www.puckon.net/hits.php?f=0&s=",year2,"-08-01&e=",year,"-06-30&l=-20&p=0", sep=""))
teams = mainpage %>%
html_nodes("td:nth-child(1)") %>%
html_text(.) %>%
gsub("\\.", "",.) %>%
as_tibble(.) %>%
set_names(., "Accronym") %>%
mutate(Accronym = ifelse(Accronym == "LA", "LAK",Accronym)) %>%
mutate(Accronym = ifelse(Accronym == "NJ", "NJD", Accronym)) %>%
mutate(Accronym = ifelse(Accronym == "SJ", "SJS", Accronym)) %>%
mutate(Accronym = ifelse(Accronym =="TB", "TBL", Accronym))
Fenwick = mainpage %>%
html_nodes("td:nth-child(6)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Fenwick = .)
Fenwick_Last20 = last20page_main %>%
html_nodes("td:nth-child(10)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Fenwick_Last20 = .)
Corsi_Last20 = last20page_main %>%
html_nodes("td:nth-child(6)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(Corsi_Last20 = .)
SOG_Last20 = last20page_main %>%
html_nodes("td:nth-child(14)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(SOG_Last20 = .)
rm(last20page_main)
GoalsPercentage_Last20 = last20page_Goals %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(GoalsPercentage_Last20 =.)
rm(last20page_Goals)
MissesPercentage_Last20 = last20page_misses %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(MissesPercentage_Last20 = .)
rm(last20page_misses)
BlocksPercentage_Last20 = last20page_blocks %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(BlocksPercentage_Last20 = .)
rm(last20page_blocks)
HitsPercentage_Last20 = last20page_hits %>%
html_nodes("td:nth-child(4)") %>%
html_text(.) %>%
as.numeric(.) %>%
tibble(HitsPercentage_Last20 = .)
rm(last20page_hits)
data = left_join(teams,lookup_Accronyms, by = "Accronym") %>%
bind_cols(.,tibble(Year = rep(year, nrow(teams))),teams,Fenwick, Fenwick_Last20, Corsi_Last20, SOG_Last20, GoalsPercentage_Last20, MissesPercentage_Last20, BlocksPercentage_Last20, HitsPercentage_Last20) %>%
mutate(FullName = ifelse(FullName == "St. Louis Blues", "St Louis Blues", FullName)) %>%
mutate(FullName = ifelse(FullName == "Anaheim Ducks" & Year <= 2006, "Mighty Ducks of Anaheim", FullName))
}
processData = function(team.1, team.2, highest.seed, data, year){
data = data %>% filter(., Year == year)
team_Fenwick = c(data$Fenwick[which(data$Team == team.1)], data$Fenwick[which(data$Team == team.2)])
team_FenwickLast20 = c(data$Fenwick_Last20[which(data$Team == team.1)], data$Fenwick_Last20[which(data$Team == team.2)])
team_CorsiLast20 = c(data$Corsi_Last20[which(data$Team == team.1)], data$Corsi_Last20[which(data$Team == team.2)])
team_SOGLast20 = c(data$SOG_Last20[which(data$Team == team.1)], data$SOG_Last20[which(data$Team == team.2)])
team_GoalsPercentageLast20 = c(data$GoalsPercentage_Last20[which(data$Team == team.1)], data$GoalsPercentage_Last20[which(data$Team == team.2)])
team_MissesPercentageLast20 = c(data$MissesPercentage_Last20[which(data$Team == team.1)], data$MissesPercentage_Last20[which(data$Team == team.2)])
team_BlocksPercentageLast20 = c(data$BlocksPercentage_Last20[which(data$Team == team.1)], data$BlocksPercentage_Last20[which(data$Team == team.2)])
team_HitsPercentageLast20 = c(data$HitsPercentage_Last20[which(data$Team == team.1)], data$HitsPercentage_Last20[which(data$Team == team.2)])
list(Fenwick = as.numeric(team_Fenwick[which(c(team.1,team.2) == highest.seed)] - team_Fenwick[which(c(team.1, team.2) != highest.seed)]),
Fenwick_Last20 = as.numeric(team_FenwickLast20[which(c(team.1,team.2) == highest.seed)] - team_FenwickLast20[which(c(team.1, team.2) != highest.seed)]),
Corsi_Last20 = as.numeric(team_CorsiLast20[which(c(team.1,team.2) == highest.seed)] - team_CorsiLast20[which(c(team.1, team.2) != highest.seed)]),
SOG_Last20 = as.numeric(team_SOGLast20[which(c(team.1,team.2) == highest.seed)] - team_SOGLast20[which(c(team.1, team.2) != highest.seed)]),
GoalsPercentageLast20 = as.numeric(team_GoalsPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_GoalsPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
MissesPercentageLast20 = as.numeric(team_MissesPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_MissesPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
BlocksPercentageLast20 = as.numeric(team_BlocksPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_BlocksPercentageLast20[which(c(team.1, team.2) != highest.seed)]),
HitsPercentageLast20 = as.numeric(team_HitsPercentageLast20[which(c(team.1,team.2) == highest.seed)] - team_HitsPercentageLast20[which(c(team.1, team.2) != highest.seed)]))
}
allYears = bind_rows(lapply(seq(2006, 2019,1), FUN = getData_pon)) %>% rename(Team = FullName)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/Evolving Hockey WAR.R', echo=TRUE)
warnings()
View(final)
