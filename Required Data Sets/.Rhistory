H2Hstats = H2Hstats %>%
set_names(c("FullName", "Wins")) %>%
mutate(WinRatio = Wins/sum(Wins)) %>%
right_join(., teamNames, by = "FullName") %>%
replace_na(., list(Wins = 0, WinRatio = 0))
}else {
H2Hstats = NA
}
ifelse(process == TRUE & any(!is.na(H2Hstats)), H2Hstats$WinRatio[H2Hstats$FullName == highest.seed] - H2Hstats$WinRatio[H2Hstats$FullName != highest.seed],
ifelse(process == TRUE & any(is.na(H2Hstats)), H2Hstats, H2Hstats))
}
calculateGoalieStats = function(teamPage, returnGoalieSavePercentage = TRUE){
teamPage = teamPage$page
main = teamPage %>%
html_nodes("#goalies tbody .right:nth-child(22) , #goalies tbody .right:nth-child(15) , #goalies tbody .right:nth-child(15) , #goalies tbody .right:nth-child(12)") %>%
html_text(.) %>%
as.numeric(.) %>%
as_tibble(.) %>%
mutate(Stat = rep(c("SavePercentage", "Minutes","GPS"), length(.$value)/3)) %>%
mutate(Goalie = rep(seq_len(length(.$value)/3), each = 3)) %>%
spread(., Stat, value) %>%
mutate(WeightedGPS = GPS * Minutes / sum(.$Minutes)) %>%
mutate(WeightedGoalieSavePercentage = Minutes * SavePercentage / sum(Minutes))
WeightedGoalieSavePercentage = sum(main$WeightedGoalieSavePercentage, na.rm = TRUE)
WeightedGPS = sum(main$WeightedGPS, na.rm = TRUE)
ifelse(returnGoalieSavePercentage == TRUE, WeightedGoalieSavePercentage, WeightedGPS)
}
calculateRecordOverTime = function(teamPage){
year = as.numeric(teamPage$year)
teamPage = teamPage$games
if(year != 2013){
RecordsOverTime = teamPage %>%
html_nodes("tr:nth-child(86) .center+ .right , tr:nth-child(62) .center+ .right , tr:nth-child(41) .center+ .right , #games tr:nth-child(20) .center+ .right") %>%
html_text(.) %>%
as.numeric(.) %>%
as_tibble(.) %>%
set_names("Wins") %>%
mutate(Difference = ifelse(is.na(Wins - lag(Wins, 1)), Wins, Wins - lag(Wins, 1))) %>%
mutate(Record = Difference / 20)
RecordsOverTime$Record[4] = RecordsOverTime$Difference[4]/22
}else{
RecordsOverTime = teamPage %>%
html_nodes("tr:nth-child(50) .center+ .right , tr:nth-child(37) .center+ .right , tr:nth-child(25) .center+ .right , tr:nth-child(12) .center+ .right") %>%
html_text(.) %>%
as.numeric(.) %>%
as_tibble(.) %>%
set_names("Wins") %>%
mutate(Difference = ifelse(is.na(Wins - lag(Wins, 1)), Wins, Wins - lag(Wins, 1))) %>%
mutate(Record = Difference / 12)
}
RecordsOverTime = RecordsOverTime %>%
select(Record) %>%
slice(., 1:4) %>%
bind_cols(Quarter = c("Q1Record", "Q2Record", "Q3Record", "Q4Record"), Record =.) %>%
spread(., key = Quarter, value = Record) %>%
bind_cols(tibble(Year = year), .)
RecordsOverTime
}
calculateTeamPoints = function(teamPage){
teamPage = teamPage$page
Points = teamPage %>%
html_nodes(".prevnext+ p") %>%
html_text(.) %>%
sub(".* \\(", "", .) %>%
sub(" points).*", "",.) %>%
as.numeric(.)
Points
}
calculatePlayerPoints = function(teamPage){
teamPage = teamPage$page
PlayerPoints = teamPage %>%
html_nodes("#skaters tfoot .right:nth-child(8)") %>%
html_text(.) %>%
as.numeric(.)
PlayerPoints
}
getTeamNames = function(year){
read_html(paste("C:/Users/Brayden/Documents/NHLModel/Hockey Reference/", year, ".html", sep = "")) %>%
html_nodes("#stats tbody .left") %>%
html_text(.) %>%
str_remove(.,"[*]") %>%
str_remove(., "[.]") %>%
tibble(Year = rep(year, length(.)), Team = .)
}
findMatch = function(team.1, team.2, stat, data, highest.seed){
tmp = unlist(c(data[, names(data) %in% c(stat)][which(data$Team == team.1),], data[, names(data) %in% c(stat)][which(data$Team == team.2),]))
tmp[which(c(team.1, team.2) == highest.seed)] - tmp[which(c(team.1, team.2) != highest.seed)]
}
processData = function(team.1, team.2, highest.seed, year, data){
data = data %>% filter(., Year == year)
team_vec = as_tibble(unlist(lapply(colnames(data)[3:ncol(data)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
team_vec
}
allData = bind_rows(lapply(2006:2018, FUN = getTeamNames))
allTeamPages = mapply(FUN = grabPageandGamesofSpecificTeam, team = allData$Team, year = allData$Year, SIMPLIFY = FALSE)
final = tibble(WeightedGoalieSavePercntage = unlist(lapply(allTeamPages, FUN = calculateGoalieStats, returnGoalieSavePercentage = TRUE))) %>%
bind_cols(., WeightedGPS = unlist(lapply(allTeamPages, FUN = calculateGoalieStats, returnGoalieSavePercentage = FALSE)),
PlayerPoints = unlist(lapply(allTeamPages, FUN = calculatePlayerPoints)),
Points = unlist(lapply(allTeamPages, FUN = calculateTeamPoints))) %>%
bind_cols(allData,.)
RecordsOverTime = bind_rows(lapply(allTeamPages, FUN = calculateRecordOverTime)) %>%
bind_cols(Team = allData$Team, .)
View(RecordsOverTime)
RecordsOverTime = bind_rows(lapply(allTeamPages, FUN = calculateRecordOverTime)) %>%
bind_cols(Team = allData$Team, .) %>%
rowwise %>%
mutate(SDRecord = sd(Q1Record, Q2Record, Q3Record, Q4Record))
RecordsOverTime = bind_rows(lapply(allTeamPages, FUN = calculateRecordOverTime)) %>%
bind_cols(Team = allData$Team, .) %>%
rowwise %>%
mutate(SDRecord = sd(c(Q1Record, Q2Record, Q3Record, Q4Record)))
View(RecordsOverTime)
View(RecordsOverTime)
View(final)
View(final)
View(RecordsOverTime)
source('~/NHLModel/Scraping Scripts and Template/Hockey Reference - Other Stats.R', echo=TRUE)
mainpage = read_html("https://www.hockey-reference.com/playoffs/NHL_2017.html")
winner = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]")
winner
mainpage = read_html("https://www.hockey-reference.com/playoffs/NHL_2017.html")
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]")
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .)
View(allPlayoffTeams)
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .) %>%
mutate(Winner = rep(c(1,0), nrow(.)/2))
View(allPlayoffTeams)
View(allPlayoffTeams)
View(template)
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .) %>%
mutate(Winner = rep(c(1,0), nrow(.)/2)) %>%
slice(., 1:2)
View(allPlayoffTeams)
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .) %>%
mutate(Winner = rep(c(1,0), nrow(.)/2))
View(allPlayoffTeams)
team.1 = "Pittsburgh Penguins"
team.2 = "Nashville Predators"
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .) %>%
mutate(Winner = rep(c(1,0), nrow(.)/2)) %>%
filter(., TeamName == team.1 | TeamName == team.2)
View(allPlayoffTeams)
team.2 = "Nashville Predators"
team.1 = "Anaheim Ducks"
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3) a") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
tibble(TeamName = .) %>%
mutate(Winner = rep(c(1,0), nrow(.)/2)) %>%
filter(., TeamName == team.1 | TeamName == team.2)
View(allPlayoffTeams)
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)")
year = 2017
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)")
View(allPlayoffTeams)
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.)
allPlayoffTeams
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
str_detect(., "[over]")
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
str_detect(., "over")
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")]
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")]
allPlayoffTeams
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
str_split_fixed(., "over", n=2)
View(allPlayoffTeams)
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.)
View(allPlayoffTeams)
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
View(allPlayoffTeams)
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., paste(team.1, team.2, sep= " "))]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")]
allPlayoffTeams
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1 & team.2)]
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., paste(c(team.1,team.2), collapse = "|"))]
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., paste(c(team.1,team.2), collapse = "&"))]
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)]
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(,"over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
View(allPlayoffTeams)
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
ifelse(allPlayoffTeams$Winner == highest.seed, "W", "L")
getWinner = function(year, highest.seed, team.1, team.2){
mainpage = read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
ifelse(allPlayoffTeams$Winner == highest.seed, "W", "L")
}
bind_rows(mapply(FUN = getWinner, year = template$Year, highest.seed = template$Highest.Seed, team.1 = template$Team1, team.2 = template$Team2))
allWinners = lapply(2006:2018, function(year){read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))})
View(allWinners)
View(allWinners)
View(allWinners)
2017-2006
View(allWinners)
2017-2005
2018-2005
mainpage = pages[[year - 2005]]
getWinner = function(pages, year, highest.seed, team.1, team.2){
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
ifelse(allPlayoffTeams$Winner == highest.seed, "W", "L")
}
giveWinners = mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE)
View(giveWinners)
getWinner = function(pages, year, highest.seed, team.1, team.2){
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
ifelse(any(allPlayoffTeams$Winner == highest.seed), "W", "L")
}
giveWinners = mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE)
View(giveWinners)
View(giveWinners)
mainpage = allWinners[[1]]
year = 2006
pages = allWinners
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
View(allPlayoffTeams)
team.1 = "Ottawa Senators"
team.2 = "Tampa Bay Lightning"
highest.seed = "Ottawa Senators"
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser"))
View(allPlayoffTeams)
allPlayoffTeams$Winner
any(allPlayoffTeams$Winner == highest.seed)
allPlayoffTeams$Winner[1] == highest.seed
View(allPlayoffTeams)
allPlayoffTeams$Winner[1]
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser")) %>%
mutate(Winner = str_trim(Winner))
View(allPlayoffTeams)
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser")) %>%
mutate(Winner = str_trim(Winner),
Loser = str_trim(Loser))
ifelse(any(allPlayoffTeams$Winner == highest.seed), "W", "L")
getWinner = function(pages, year, highest.seed, team.1, team.2){
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser")) %>%
mutate(Winner = str_trim(Winner),
Loser = str_trim(Loser))
ifelse(any(allPlayoffTeams$Winner == highest.seed), "W", "L")
}
allWinners = lapply(2006:2018, function(year){read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))})
giveWinners = mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE)
rm(allWinners)
View(giveWinners)
allWinners = lapply(2006:2018, function(year){read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))})
giveWinners = bind_rows(mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE))
rm(allWinners)
View(giveWinners)
View(giveWinners)
allWinners = lapply(2006:2018, function(year){read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))})
giveWinners = bind_rows(ResultProper = mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE))
getWinner = function(pages, year, highest.seed, team.1, team.2){
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser")) %>%
mutate(Winner = str_trim(Winner),
Loser = str_trim(Loser))
ResultProper = ifelse(any(allPlayoffTeams$Winner == highest.seed), "W", "L")
}
giveWinners = bind_rows(mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE))
View(giveWinners)
getWinner = function(pages, year, highest.seed, team.1, team.2){
mainpage = pages[[year - 2005]]
allPlayoffTeams = mainpage %>%
html_nodes("#all_playoffs td:nth-child(3)") %>%
html_text(.) %>%
str_remove(., "[.]") %>%
.[str_detect(., "over")] %>%
.[str_detect(., team.1) & str_detect(.,team.2)] %>%
str_split_fixed(., "over", n=2) %>%
as_tibble(.) %>%
set_names(c("Winner", "Loser")) %>%
mutate(Winner = str_trim(Winner),
Loser = str_trim(Loser))
ifelse(any(allPlayoffTeams$Winner == highest.seed), "W", "L")
}
allWinners = lapply(2006:2018, function(year){read_html(paste("https://www.hockey-reference.com/playoffs/NHL_",year, ".html", sep = ""))})
giveWinners = unlist(mapply(FUN = getWinner, year = template$Year, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, MoreArgs = list(pages = allWinners), SIMPLIFY = FALSE))
tibble(ResultProper = giveWinners)
allStats = bind_rows(mapply(FUN = processData, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, year = template$Year, MoreArgs = list(data = final), SIMPLIFY = FALSE)) %>%
bind_cols(tibble(ResultProper = giveWinners),., giveH2H) %>%
bind_cols(bind_rows(mapply(FUN = processData, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Team2, year = template$Year, MoreArgs = list(data = RecordsOverTime), SIMPLIFY = FALSE)))
source('~/NHLModel/Scraping Scripts and Template/Hockey Reference - Other Stats.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/ELOCalculate.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/ESPN.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/Hockey Reference - Aggregated Stats.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/Hockey Reference - Other Stats.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/HockeyReference.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/NaturalStatTrick.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/NaturalStatTrick.R', echo=TRUE)
setwd("C:/Users/Brayden/Documents/NHL Model/Required Data Sets")
setwd("C:/Users/Brayden/Documents/NHL Model/Required Data Sets")
setwd("C:/Users/Brayden/Documents/NHLModel/Required Data Sets")
write_csv(template[,7], "SCFScores_Feb3rd_2019.csv")
source('~/NHLModel/Scraping Scripts and Template/NaturalStatTrick.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/NHL Official.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/NHL Official.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/OddsPortal.R', echo=TRUE)
source('~/NHLModel/Scraping Scripts and Template/Puck on Net.R', echo=TRUE)
