calculateM = function(goal.difference_home, ELO_Home, ELO_Visitor){
M = max(1,log(abs(goal.difference_home-0.0085*(ELO_Home - ELO_Visitor + 35)) + exp(1) -1))
ifelse(is.na(M), stop(paste("List of Parameters:",goal.difference_home, ELO_Home, ELO_Visitor, sep = " ")), M)
}
calculateEH = function(ELO_Home, ELO_Visitor){
EH = 1/(1 + 10^(-(ELO_Home - ELO_Visitor + 35) / 400))
ifelse(is.na(EH), stop("NA"), EH)
}
getData = function(year, last.games = 0){
teamnames = read_html(paste("https://www.hockey-reference.com/leagues/NHL_",year,"_standings.html", sep="")) %>%
html_nodes("#standings td.left") %>%
html_text(.)
trackELO = tibble(Team = teamnames) %>%
bind_cols(., ELORating = rep(1500, nrow(.)), Year = rep(year, nrow(.)))
rm(teamnames)
schedule_and_results = read_html(paste("https://www.hockey-reference.com/leagues/NHL_",year,"_games.html", sep=""))
visitor = schedule_and_results %>%
html_nodes("#games .left+ td.left") %>%
html_text(.)
data  = schedule_and_results %>%
html_nodes("#games td:nth-child(4)") %>%
html_text(.) %>%
bind_cols(Visitor = visitor, Home = .)
rm(visitor)
data = schedule_and_results %>%
html_nodes("#games .right:nth-child(3)") %>%
html_text(.) %>%
as.numeric(.) %>%
bind_cols(data, Goals_Visitor = .)
data = schedule_and_results %>%
html_nodes("#games .right:nth-child(5)") %>%
html_text(.) %>%
as.numeric(.) %>%
bind_cols(data, Goals_Home = .)
data = schedule_and_results %>%
html_nodes("#games td.center") %>%
html_text(.) %>%
bind_cols(data, SOorOTIndicator = .) %>%
mutate(Outcome.Home = ifelse(SOorOTIndicator == "SO", 0.5,
ifelse(Goals_Home > Goals_Visitor, 1,0))) %>%
filter(.,!is.na(Goals_Visitor))
constant = ifelse(last.games == 0, 1, nrow(data)-last.games)
for (i in constant:nrow(data)){
visitorELO = trackELO$ELORating[which(trackELO$Team == data$Visitor[i])]
homeELO = trackELO$ELORating[which(trackELO$Team == data$Home[i])]
goal.difference = data$Goals_Home[i] - data$Goals_Visitor[i]
ELOChange = 8 * 1 * calculateM(goal.difference_home = goal.difference, ELO_Home = homeELO, ELO_Visitor = visitorELO) * (data$Outcome.Home[i] - calculateEH(ELO_Home = homeELO, ELO_Visitor = visitorELO))
if(is.na(ELOChange)){
paste("Iteration:", i, sep = " ")
}
trackELO$ELORating[which(trackELO$Team == data$Visitor[i])] = visitorELO + -ELOChange
trackELO$ELORating[which(trackELO$Team == data$Home[i])] = homeELO + ELOChange
}
rm(i)
out = trackELO
}
abc = getData(2019) %>% arrange(., -ELORating)
abc
View(abc)
library(tidyverse)
library(rvest)
template = read_csv("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Scraping Scripts and Template/Template.csv") %>%
mutate_all(funs(str_replace(., "Mighty Ducks of Anaheim", "Anaheim Ducks"))) %>%
mutate_all(funs(str_replace(., "Phoenix Coyotes", "Arizona Coyotes")))
accronyms_pg = read_html("https://en.wikipedia.org/wiki/Template:NHL_team_abbreviations")
accronyms = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 1,3)
fullnames = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 7, 1000000L)
lookup_Accronyms = cbind(FullName = fullnames, Team = accronyms) %>%
as_tibble(.) %>%
bind_rows(., c(FullName = "Mighty Ducks of Anaheim", Team = "MDA"))
rm(accronyms_pg, accronyms, fullnames)
getData = function(year){
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
mutate(GS = GS/TOI) %>%
mutate(P1 = P1/TOI) %>%
mutate(CF = CF/TOI) %>%
rename(iPDO = PDO) %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC", "iPDO")) %>%
mutate(Team = as.character(Team))
bind_cols(data, tibble(Year = rep(year, nrow(data))))
}
allCombined = bind_rows(lapply(2008:2018, getData)) %>%
mutate(Team = ifelse(Team == "L.A", "LAK", Team)) %>%
mutate(Team = ifelse(Team == "N.J", "NJD", Team)) %>%
mutate(Team = ifelse(Team == "S.J", "SJS", Team)) %>%
mutate(Team = ifelse(Team == "T.B", "TBL", Team))
findMatch = function(team.1, team.2, stat, data, highest.seed){
data = data %>%
left_join(., lookup_Accronyms, by = "Team") %>%
mutate(FullName = ifelse(FullName == "St. Louis Blues", "St Louis Blues", FullName))
tmp = unlist(c(data[, names(data) %in% c(stat)][which(data$FullName == team.1),], data[, names(data) %in% c(stat)][which(data$FullName == team.2),]))
tmp[which(c(team.1, team.2) == highest.seed)] - tmp[which(c(team.1, team.2) != highest.seed)]
}
processData = function(team.1, team.2, highest.seed, data, year){
data = data %>%
filter(., Year == year)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
colnames(team_vec) = colnames(data)[2:(ncol(data)-1)]
team_vec
}
View(allCombined)
final = bind_rows(mapply(FUN = processData, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, year = template$Year, MoreArgs = list(data = allCombined), SIMPLIFY = FALSE))
View(final)
View(allCombined)
moments::skewness(final$ZSR_min, na.rm= TRUE)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaAllTeamStats.R', echo=TRUE)
library(tidyverse)
library(rvest)
template = read_csv("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Scraping Scripts and Template/Template.csv") %>%
mutate_all(funs(str_replace(., "Mighty Ducks of Anaheim", "Anaheim Ducks"))) %>%
mutate_all(funs(str_replace(., "Phoenix Coyotes", "Arizona Coyotes")))
accronyms_pg = read_html("https://en.wikipedia.org/wiki/Template:NHL_team_abbreviations")
accronyms = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 1,3)
fullnames = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 7, 1000000L)
lookup_Accronyms = cbind(FullName = fullnames, Team = accronyms) %>%
as_tibble(.) %>%
bind_rows(., c(FullName = "Mighty Ducks of Anaheim", Team = "MDA"))
rm(accronyms_pg, accronyms, fullnames)
getData = function(year){
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
bind_cols(data, tibble(Year = rep(year, nrow(data))))
}
allCombined = bind_rows(lapply(2008:2018, getData)) %>%
mutate(Team = ifelse(Team == "L.A", "LAK", Team)) %>%
mutate(Team = ifelse(Team == "N.J", "NJD", Team)) %>%
mutate(Team = ifelse(Team == "S.J", "SJS", Team)) %>%
mutate(Team = ifelse(Team == "T.B", "TBL", Team))
View(allCombined)
year = 2013
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
View(data)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
mutate(CF = CF/TOI) %>%
mutate(P1 = P1/TOI) %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
View(data)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
moments::skewness(final$ZSR_min, na.rm = TRUE)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
moments::skewness(final$ZSR_min, na.rm = TRUE)
View(final)
View(allCombined)
year = 2013
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
mutate(P1 = P1/TOI) %>%
mutate(CF = CF/TOI)
View(data)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
mutate(P1 = P1/TOI) %>%
mutate(CF = CF/TOI) %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
View(data)
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
View(data)
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
mutate(P1 = P1/TOI) %>%
mutate(CF = CF/TOI) %>%
ungroup(.) %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
View(data)
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
View(data)
View(data)
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
group_by(Team) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
View(final)
moments::skewness(final$ZSR_min, na.rm = TRUE)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
moments::skewness(final$ZSR_min, na.rm = TRUE)
View(final)
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
library(tidyverse)
library(rvest)
template = read_csv("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Scraping Scripts and Template/Template.csv") %>%
mutate_all(funs(str_replace(., "Mighty Ducks of Anaheim", "Anaheim Ducks"))) %>%
mutate_all(funs(str_replace(., "Phoenix Coyotes", "Arizona Coyotes")))
accronyms_pg = read_html("https://en.wikipedia.org/wiki/Template:NHL_team_abbreviations")
accronyms = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 1,3)
fullnames = accronyms_pg %>%
html_nodes(".column-width li") %>%
html_text(.) %>%
substr(., 7, 1000000L)
lookup_Accronyms = cbind(FullName = fullnames, Team = accronyms) %>%
as_tibble(.) %>%
bind_rows(., c(FullName = "Mighty Ducks of Anaheim", Team = "MDA"))
rm(accronyms_pg, accronyms, fullnames)
getData = function(year){
data = read_csv(paste("C:/Users/Brayden/Documents/GitHub/NHLPlayoffs/Game Score/", year, ".csv", sep=""), na = "--") %>%
.[,2:ncol(.)] %>%
mutate(TradedPlayer = ifelse(grepl("/", Team) == TRUE, 1,0)) %>%
mutate(Team = gsub(" ", "", Team, fixed = TRUE)) %>%
mutate_if(is.numeric, funs(ifelse(is.infinite(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0,.))) %>%
mutate_if(is.numeric, funs(ifelse(is.nan(.),0,.))) %>%
select(., -Position, -Season)
AllTradedPlayers = data[data$TradedPlayer == 1,]
AllTradedPlayers_Team1 = AllTradedPlayers %>% mutate(Team = sub("/.*", "", AllTradedPlayers$Team))
AllTradedPlayers_Team2 = AllTradedPlayers %>% mutate(Team = sub(".*/", "", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers %>% mutate(Team = sub(".*/ *(.*?) */.*", "\\1", AllTradedPlayers$Team))
AllTradedPlayers_Team3 = AllTradedPlayers_Team3[-which(grepl("/", AllTradedPlayers_Team3$Team) == TRUE), ]
combined = rbind(AllTradedPlayers_Team1, AllTradedPlayers_Team2, AllTradedPlayers_Team3)
rm(list = ls(pattern = "AllTradedPlayers"))
data = bind_rows(data[-which(data$TradedPlayer == 1),], combined)
rm(combined)
data$Team = as.factor(data$Team)
#removed "GS", "CF.", "Rel.CF." since they are already included in Full Data
data = data %>%
group_by(Team) %>%
mutate(CF = CF/TOI) %>%
mutate(P1 = P1/TOI) %>%
summarise_at(funs(mean(., na.rm = TRUE), sd(., na.rm=TRUE), min(.,na.rm=TRUE), max(., na.rm=TRUE)), .vars = c("iCF/60", "P1", "P1/60", "GS", "GS/60", "CF", "Rel CF%",
"ixGF/60", "ZSR", "CF% QoT", "CF% QoC", "TOI% QoT", "TOI% QoC")) %>%
mutate(Team = as.character(Team))
bind_cols(data, tibble(Year = rep(year, nrow(data))))
}
allCombined = bind_rows(lapply(2008:2018, getData)) %>%
mutate(Team = ifelse(Team == "L.A", "LAK", Team)) %>%
mutate(Team = ifelse(Team == "N.J", "NJD", Team)) %>%
mutate(Team = ifelse(Team == "S.J", "SJS", Team)) %>%
mutate(Team = ifelse(Team == "T.B", "TBL", Team))
View(allCombined)
team.1 = template$Team1[1]
team.1 = template$Team1[130]
team.2 = template$Team2[130]
highest.seed = template$Highest.Seed[130]
data = allCombined
year = template$Year[130]
data = data %>%
filter(., Year == year)
View(data)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))
)
findMatch = function(team.1, team.2, stat, data, highest.seed){
data = data %>%
left_join(., lookup_Accronyms, by = "Team") %>%
mutate(FullName = ifelse(FullName == "St. Louis Blues", "St Louis Blues", FullName))
tmp = unlist(c(data[, names(data) %in% c(stat)][which(data$FullName == team.1),], data[, names(data) %in% c(stat)][which(data$FullName == team.2),]))
tmp[which(c(team.1, team.2) == highest.seed)] - tmp[which(c(team.1, team.2) != highest.seed)]
}
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed)))
View(team_vec)
View(data)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed)))
View(team_vec)
data$ZSR_min[team == "PIT"]
data$ZSR_min[Team == "PIT"]
data$ZSR_min[which(data$Team == "PIT")]
data$ZSR_min[which(data$Team == "NYR")]
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.)
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
View(team_vec)
colnames(team_vec) = colnames(data)[2:(ncol(data)-1)]
View(team_vec)
team_vec = as_tibble(unlist(lapply(colnames(data)[2:(ncol(data)-1)], FUN = findMatch, team.1 = team.1, team.2 = team.2, data = data, highest.seed = highest.seed))) %>%
rownames_to_column(.) %>%
spread(rowname, value)
View(team_vec)
team_vec
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
View(final)
View(final)
final = bind_rows(mapply(FUN = processData, team.1 = template$Team1, team.2 = template$Team2, highest.seed = template$Highest.Seed, year = template$Year, MoreArgs = list(data = allCombined), SIMPLIFY = FALSE)) %>%
.[, (ncol(allCombined)-1):ncol(.)]
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/CorsicaGameScore.R', echo=TRUE)
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/Hockey Reference - Aggregated Stats.R', echo=TRUE)
View(final)
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/Hockey Reference - Aggregated Stats.R', echo=TRUE)
View(final)
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/Hockey Reference - Other Stats.R', echo=TRUE)
abc = "Columbus Blue Jackets over Washington Capitals"
abc[str_detect(abc, "over")]
str_detect(abc, "over")
source('~/GitHub/NHLPlayoffs/Scraping Scripts and Template/Hockey Reference - Other Stats.R', echo=TRUE)
View(allStats)
